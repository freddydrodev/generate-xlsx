{"version":3,"sources":["../src/index.ts","../src/constants.ts"],"sourcesContent":["import type { Alignment, Font } from \"exceljs\";\nimport ExcelJS from \"exceljs\";\nimport { saveAs } from \"file-saver\";\nimport {\n  DEFAULT_BORDER,\n  DEFAULT_ROW_ALIGNEMENT,\n  DEFAULT_ROW_FONT,\n  ROW_HEIGHT,\n} from \"./constants\";\n\ntype GenerateXLSXArgs = {\n  fileName: string;\n  config: {\n    name: string;\n    orientation?: \"portrait\" | \"landscape\";\n    zoom?: number;\n    colWidth?: number;\n    colHeight?: number;\n  };\n  data: { [key: string]: string | number }[];\n  // headers: Partial<ExcelJS.Column>[];\n  headers: Pick<\n    Partial<ExcelJS.Column>,\n    | \"key\"\n    | \"header\"\n    | \"border\"\n    | \"alignment\"\n    | \"fill\"\n    | \"numFmt\"\n    | \"values\"\n    | \"width\"\n    | \"style\"\n    | \"font\"\n  >[];\n  rowAlignment?: Partial<Alignment>;\n  defaultFont?: Partial<Font>;\n  boldFont?: Partial<Font>;\n  height?: number;\n  title?: { height?: number; fontSize?: number };\n};\n\nexport const generateXLSXGrid = async (args: GenerateXLSXArgs) => {\n  const { data, config, rowAlignment, defaultFont, height, fileName, headers } =\n    args;\n\n  const wb = new ExcelJS.Workbook();\n\n  /**\n   * CREATE THE SHEET\n   */\n  const sheet = wb.addWorksheet(config.name, {\n    views: [{ style: \"pageBreakPreview\" }],\n    properties: {\n      defaultRowHeight: config.colHeight ?? ROW_HEIGHT,\n    },\n    headerFooter: {\n      oddFooter: \"&C&A_&F&RPage &P / &N\",\n    },\n    pageSetup: {\n      paperSize: 9,\n      horizontalCentered: true,\n      scale: config.zoom ?? 60,\n      orientation: config.orientation ?? \"portrait\",\n      margins: {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        header: 0,\n        footer: 0,\n      },\n    },\n  });\n\n  /**\n   * CREATE THE SECTION HEADER\n   */\n  sheet.columns = headers;\n\n  sheet.eachRow((row) => {\n    row.height = height ?? ROW_HEIGHT;\n  });\n\n  sheet.columns.forEach((column, index) => {\n    column.eachCell?.({ includeEmpty: true }, (cell) => {\n      cell.border = DEFAULT_BORDER;\n      cell.font = defaultFont ?? DEFAULT_ROW_FONT;\n      cell.alignment = rowAlignment ?? DEFAULT_ROW_ALIGNEMENT;\n      cell.fill = {\n        pattern: \"solid\",\n        type: \"pattern\",\n        fgColor: { argb: \"FFD9D9D9\" },\n      };\n    });\n  });\n\n  /**\n   * ADD THE DATA ROWS\n   */\n\n  const dataRow = sheet.addRows(data);\n\n  if (dataRow.length > 0) {\n    dataRow.forEach((r, i) => {\n      r.height = ROW_HEIGHT;\n\n      r.eachCell({ includeEmpty: true }, (cell, colNumber) => {\n        cell.border = DEFAULT_BORDER;\n        cell.alignment = DEFAULT_ROW_ALIGNEMENT;\n        cell.font = DEFAULT_ROW_FONT;\n      });\n    });\n  }\n\n  if (data.length <= 0 || headers.length <= 0) return;\n\n  const buffer = await wb.xlsx.writeBuffer();\n\n  const blob = new Blob([buffer], { type: \"applicationi/xlsx\" });\n\n  saveAs(blob, fileName);\n};\n","import type { Font, Borders, Alignment } from \"exceljs\";\n\nexport const DEFAULT_BORDER: Partial<Borders> = {\n  bottom: { color: { argb: \"FF000000\" }, style: \"thin\" },\n  top: { color: { argb: \"FF000000\" }, style: \"thin\" },\n  left: { color: { argb: \"FF000000\" }, style: \"thin\" },\n  right: { color: { argb: \"FF000000\" }, style: \"thin\" },\n};\n\nexport const DEFAULT_ROW_ALIGNEMENT: Partial<Alignment> = {\n  horizontal: \"center\",\n  vertical: \"middle\",\n  wrapText: true,\n};\n\nexport const DEFAULT_XLSX_FONT = \"Goudy Old Style\";\n\nexport const BOLD_XLSX_FONT = \"Goudy Old Style Bold\";\n\nexport const ROW_HEIGHT = 50;\n\nexport const XLS_JUSTIF_HEADING_HEIGHT = 70;\n\nexport const DEFAULT_ROW_FONT: Partial<Font> = {\n  size: 16,\n  name: DEFAULT_XLSX_FONT,\n};\n\nexport const BOLD_FONT: Partial<Font> = {\n  ...DEFAULT_ROW_FONT,\n  bold: true,\n  name: BOLD_XLSX_FONT,\n};\n\nexport const DEFAULT_HEADER_ROW_HEIGHT = 70;\n\nexport const DEFAULT_ROW_HEIGHT = 65;\n\nexport const DEFAULT_HEADLINE_HEIGHT = 25;\n\nexport const TABLE_LINE_PER_PAGE = 15;\n\nexport const TABLE_LINE_ON_FIRST_PAGE = 9;\n\nexport const TABLE_HEADERS: any = {\n  nom_complet: \"NOM ET PRENOMS\",\n  matricule: \"MLE\",\n  emploi: \"EMPLOI\",\n  fonction: \"FONCTION\",\n  annee_de_prise_de_fonction: \"PRISE DE FONCTION AFF/MAR\",\n  anciennete: \"ANCIENNETE\",\n  grade: \"CATEGORIE\",\n  points: \"POINTS\",\n  prime_de_base: \"PRIME BASE\",\n  prime_de_responsabilite: \"PRIME RESPONSABILITE\",\n  prime_anciennete: \"PRIME ANCIENNETE\",\n  prime_specifique: \"PRIME SPECIFIQUE AFF MAR\",\n  relicat: \"RETENUE\",\n  forfait: \"FORFAIT\",\n  total: \"TOTAL\",\n  taux: \"TAUX DE LA PRIME DE BASE\",\n  prime_lie_a_l_emploie: \"PRIME LIE A L'EMPLOI\",\n  prime_d_installation: \"PRIME D'INSTALLATION\",\n  prime_de_logement: \"PRIME DE LOGEMENT\",\n  prime_de_plus_value: \"PRIME DE PLUS VALUE\",\n  prime_de_securite: \"PRIME DE SECURITE\",\n  prime_de_travail_supplementaire: \"PRIME DE TRAVAIL SUPPLEMENTAIRE\",\n  // rib: ,\n};\n\nexport const getPeriod = (trimester: { nom: string; annee: number }) => {\n  switch (trimester.nom) {\n    case \"Janvier - Mars\":\n      return `Du 01/01/${trimester.annee} au 31/03/${trimester.annee}`;\n    case \"Avril - Juin\":\n      return `Du 01/04/${trimester.annee} au 30/06/${trimester.annee}`;\n    case \"Juillet - Septembre\":\n      return `Du 01/07/${trimester.annee} au 30/09/${trimester.annee}`;\n    case \"Octobre - Décembre\":\n    default:\n      return `Du 01/10/${trimester.annee} au 31/12/${trimester.annee}`;\n  }\n};\n\nexport const getPeriodMonth = (trimester: { nom: string; annee: number }) => {\n  switch (trimester.nom) {\n    case \"Janvier - Mars\":\n      return `MARS ${trimester.annee}`;\n    case \"Avril - Juin\":\n      return `JUIN ${trimester.annee}`;\n    case \"Juillet - Septembre\":\n      return `SEPTEMBRE ${trimester.annee}`;\n    case \"Octobre - Décembre\":\n    default:\n      return `DECEMBRE ${trimester.annee}`;\n  }\n};\n"],"mappings":"0nBACA,OAAOA,MAAa,UACpB,OAAS,UAAAC,MAAc,aCAhB,IAAMC,EAAmC,CAC9C,OAAQ,CAAE,MAAO,CAAE,KAAM,UAAW,EAAG,MAAO,MAAO,EACrD,IAAK,CAAE,MAAO,CAAE,KAAM,UAAW,EAAG,MAAO,MAAO,EAClD,KAAM,CAAE,MAAO,CAAE,KAAM,UAAW,EAAG,MAAO,MAAO,EACnD,MAAO,CAAE,MAAO,CAAE,KAAM,UAAW,EAAG,MAAO,MAAO,CACtD,EAEaC,EAA6C,CACxD,WAAY,SACZ,SAAU,SACV,SAAU,EACZ,EAEaC,EAAoB,kBAEpBC,EAAiB,uBAEjBC,EAAa,GAInB,IAAMC,EAAkC,CAC7C,KAAM,GACN,KAAMC,CACR,EAEaC,EAA2BC,EAAAC,EAAA,GACnCJ,GADmC,CAEtC,KAAM,GACN,KAAMK,CACR,GDSO,IAAMC,EAA0BC,GAA2BC,EAAA,wBAzClE,IAAAC,EAAAC,EAAAC,EA0CE,GAAM,CAAE,KAAAC,EAAM,OAAAC,EAAQ,aAAAC,EAAc,YAAAC,EAAa,OAAAC,EAAQ,SAAAC,EAAU,QAAAC,CAAQ,EACzEX,EAEIY,EAAK,IAAIC,EAAQ,SAKjBC,EAAQF,EAAG,aAAaN,EAAO,KAAM,CACzC,MAAO,CAAC,CAAE,MAAO,kBAAmB,CAAC,EACrC,WAAY,CACV,kBAAkBJ,EAAAI,EAAO,YAAP,KAAAJ,EAAoBa,CACxC,EACA,aAAc,CACZ,UAAW,uBACb,EACA,UAAW,CACT,UAAW,EACX,mBAAoB,GACpB,OAAOZ,EAAAG,EAAO,OAAP,KAAAH,EAAe,GACtB,aAAaC,EAAAE,EAAO,cAAP,KAAAF,EAAsB,WACnC,QAAS,CACP,IAAK,EACL,OAAQ,EACR,KAAM,EACN,MAAO,EACP,OAAQ,EACR,OAAQ,CACV,CACF,CACF,CAAC,EAKDU,EAAM,QAAUH,EAEhBG,EAAM,QAASE,GAAQ,CACrBA,EAAI,OAASP,GAAA,KAAAA,EAAUM,CACzB,CAAC,EAEDD,EAAM,QAAQ,QAAQ,CAACG,EAAQC,IAAU,CAnF3C,IAAAhB,GAoFIA,EAAAe,EAAO,WAAP,MAAAf,EAAA,KAAAe,EAAkB,CAAE,aAAc,EAAK,EAAIE,GAAS,CAClDA,EAAK,OAASC,EACdD,EAAK,KAAOX,GAAA,KAAAA,EAAea,EAC3BF,EAAK,UAAYZ,GAAA,KAAAA,EAAgBe,EACjCH,EAAK,KAAO,CACV,QAAS,QACT,KAAM,UACN,QAAS,CAAE,KAAM,UAAW,CAC9B,CACF,EACF,CAAC,EAMD,IAAMI,EAAUT,EAAM,QAAQT,CAAI,EAclC,GAZIkB,EAAQ,OAAS,GACnBA,EAAQ,QAAQ,CAACC,EAAGC,IAAM,CACxBD,EAAE,OAAST,EAEXS,EAAE,SAAS,CAAE,aAAc,EAAK,EAAG,CAACL,EAAMO,IAAc,CACtDP,EAAK,OAASC,EACdD,EAAK,UAAYG,EACjBH,EAAK,KAAOE,CACd,CAAC,CACH,CAAC,EAGChB,EAAK,QAAU,GAAKM,EAAQ,QAAU,EAAG,OAE7C,IAAMgB,EAAS,MAAMf,EAAG,KAAK,YAAY,EAEnCgB,EAAO,IAAI,KAAK,CAACD,CAAM,EAAG,CAAE,KAAM,mBAAoB,CAAC,EAE7DE,EAAOD,EAAMlB,CAAQ,CACvB","names":["ExcelJS","saveAs","DEFAULT_BORDER","DEFAULT_ROW_ALIGNEMENT","DEFAULT_XLSX_FONT","BOLD_XLSX_FONT","ROW_HEIGHT","DEFAULT_ROW_FONT","DEFAULT_XLSX_FONT","BOLD_FONT","__spreadProps","__spreadValues","BOLD_XLSX_FONT","generateXLSXGrid","args","__async","_a","_b","_c","data","config","rowAlignment","defaultFont","height","fileName","headers","wb","ExcelJS","sheet","ROW_HEIGHT","row","column","index","cell","DEFAULT_BORDER","DEFAULT_ROW_FONT","DEFAULT_ROW_ALIGNEMENT","dataRow","r","i","colNumber","buffer","blob","saveAs"]}