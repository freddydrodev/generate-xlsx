{"version":3,"sources":["../src/index.ts","../src/constants.ts"],"sourcesContent":["import type { Alignment, Font } from \"exceljs\";\nimport ExcelJS from \"exceljs\";\nimport { saveAs } from \"file-saver\";\nimport {\n  BOLD_FONT,\n  DEFAULT_BORDER,\n  DEFAULT_NUM_FMT,\n  DEFAULT_ROW_ALIGNEMENT,\n  DEFAULT_ROW_FONT,\n  ROW_HEIGHT,\n} from \"./constants\";\n\ntype GenerateXLSXArgs = {\n  fileName: string;\n  config: {\n    name: string;\n    orientation?: \"portrait\" | \"landscape\";\n    zoom?: number;\n    colWidth?: number;\n    colHeight?: number;\n  };\n  data: { [key: string]: string | number }[];\n  // headers: Partial<ExcelJS.Column>[];\n  headers: ({\n    isCurrency?: boolean;\n    isNumber?: boolean;\n    hasTotal?: boolean;\n  } & Pick<\n    Partial<ExcelJS.Column>,\n    | \"key\"\n    | \"header\"\n    | \"border\"\n    | \"alignment\"\n    | \"fill\"\n    | \"numFmt\"\n    | \"values\"\n    | \"width\"\n    | \"style\"\n    | \"font\"\n  >)[];\n  rowAlignment?: Partial<Alignment>;\n  defaultFont?: Partial<Font>;\n  boldFont?: Partial<Font>;\n  height?: number;\n  title?: { height?: number; fontSize?: number };\n};\n\nexport const generateXLSXGrid = async (args: GenerateXLSXArgs) => {\n  const { data, config, rowAlignment, defaultFont, height, fileName, headers } =\n    args;\n\n  const wb = new ExcelJS.Workbook();\n\n  /**\n   * CREATE THE SHEET\n   */\n  const sheet = wb.addWorksheet(config.name, {\n    views: [{ style: \"pageBreakPreview\" }],\n    properties: {\n      defaultRowHeight: config.colHeight ?? ROW_HEIGHT,\n    },\n    headerFooter: {\n      oddFooter: \"&F&RPage &P / &N\",\n    },\n    pageSetup: {\n      paperSize: 9,\n      horizontalCentered: true,\n      scale: config.zoom ?? 100,\n      orientation: config.orientation ?? \"portrait\",\n      margins: {\n        top: 0.75,\n        bottom: 0.75,\n        left: 0.25,\n        right: 0.25,\n        header: 0.3,\n        footer: 0.3,\n      },\n    },\n  });\n\n  /**\n   * CREATE THE SECTION HEADER\n   */\n  sheet.columns = headers;\n\n  sheet.eachRow((row) => {\n    row.height = height ?? ROW_HEIGHT;\n  });\n\n  sheet.columns.forEach((column, index) => {\n    column.eachCell?.({ includeEmpty: false }, (cell) => {\n      const header = headers.at(index);\n\n      cell.border = header?.border ?? DEFAULT_BORDER;\n\n      cell.font = header?.font ?? BOLD_FONT;\n\n      column.alignment = header?.alignment ?? DEFAULT_ROW_ALIGNEMENT;\n\n      cell.fill = {\n        pattern: \"solid\",\n        type: \"pattern\",\n        fgColor: { argb: \"FFD9D9D9\" },\n      };\n\n      if (header?.isCurrency || header?.isNumber) {\n        column.numFmt =\n          header?.numFmt ?? header.isCurrency ? DEFAULT_NUM_FMT : \"#,##;-#,##\";\n      }\n    });\n  });\n\n  /**\n   * ADD THE DATA ROWS\n   */\n\n  const dataRow = sheet.addRows(data);\n\n  if (dataRow.length > 0) {\n    dataRow.forEach((r, i) => {\n      r.height = ROW_HEIGHT;\n\n      r.eachCell({ includeEmpty: false }, (cell, colNumber) => {\n        const header = headers.at(colNumber - 1);\n\n        cell.border = header?.border ?? DEFAULT_BORDER;\n\n        cell.alignment = header?.alignment ?? DEFAULT_ROW_ALIGNEMENT;\n\n        cell.font = header?.font ?? DEFAULT_ROW_FONT;\n      });\n    });\n  }\n\n  /**\n   * ADD TOTAL\n   */\n\n  const totauxFields: any = {};\n\n  for (let i = 0; i < headers.length; i++) {\n    const h = headers[i];\n\n    if (h.hasTotal) {\n      totauxFields[h.key ?? \"-\"] = 0;\n    } else {\n      totauxFields[h.key ?? \"-\"] = null;\n    }\n  }\n\n  const total = sheet.addRow(totauxFields);\n\n  total.height = ROW_HEIGHT;\n\n  total.eachCell({ includeEmpty: true }, (cell, colNumber) => {\n    const header = headers[colNumber - 1];\n    cell.border = header?.border ?? DEFAULT_BORDER;\n    cell.alignment = header?.alignment ?? DEFAULT_ROW_ALIGNEMENT;\n    cell.font = header?.font ?? BOLD_FONT;\n\n    if (header?.hasTotal) {\n      console.log(header);\n      const col = cell.address.replace(/[0-9]+/gi, \"\");\n\n      cell.value = {\n        date1904: false,\n        formula: `SUM(${col + \"1\"}:${col + ((cell.row as any) - 1)})`,\n      };\n    }\n  });\n\n  if (data.length <= 0 || headers.length <= 0) return;\n\n  const buffer = await wb.xlsx.writeBuffer();\n\n  const blob = new Blob([buffer], { type: \"applicationi/xlsx\" });\n\n  saveAs(blob, fileName.replace(/\\.xlsx/gi, \"\") + \".xlsx\");\n};\n","import type { Font, Borders, Alignment } from \"exceljs\";\n\nexport const DEFAULT_BORDER: Partial<Borders> = {\n  bottom: { color: { argb: \"FF000000\" }, style: \"thin\" },\n  top: { color: { argb: \"FF000000\" }, style: \"thin\" },\n  left: { color: { argb: \"FF000000\" }, style: \"thin\" },\n  right: { color: { argb: \"FF000000\" }, style: \"thin\" },\n};\n\nexport const DEFAULT_ROW_ALIGNEMENT: Partial<Alignment> = {\n  horizontal: \"center\",\n  vertical: \"middle\",\n  wrapText: true,\n};\n\n// const DEFAULT_XLSX_FONT = \"Goudy Old Style\";\n\nexport const ROW_HEIGHT = 50;\n\nexport const DEFAULT_ROW_FONT: Partial<Font> = {\n  size: 16,\n  // name: DEFAULT_XLSX_FONT,\n};\n\n// export const BOLD_XLSX_FONT = \"Goudy Old Style Bold\";\n\nexport const BOLD_FONT: Partial<Font> = {\n  ...DEFAULT_ROW_FONT,\n  bold: true,\n  // name: BOLD_XLSX_FONT,\n};\n\nexport const DEFAULT_NUM_FMT = \"# ### [$F CFA-fr-CI];-# ### [$F CFA-fr-CI]\";\n"],"mappings":"0nBACA,OAAOA,MAAa,UACpB,OAAS,UAAAC,MAAc,aCAhB,IAAMC,EAAmC,CAC9C,OAAQ,CAAE,MAAO,CAAE,KAAM,UAAW,EAAG,MAAO,MAAO,EACrD,IAAK,CAAE,MAAO,CAAE,KAAM,UAAW,EAAG,MAAO,MAAO,EAClD,KAAM,CAAE,MAAO,CAAE,KAAM,UAAW,EAAG,MAAO,MAAO,EACnD,MAAO,CAAE,MAAO,CAAE,KAAM,UAAW,EAAG,MAAO,MAAO,CACtD,EAEaC,EAA6C,CACxD,WAAY,SACZ,SAAU,SACV,SAAU,EACZ,EAIaC,EAAa,GAEbC,EAAkC,CAC7C,KAAM,EAER,EAIaC,EAA2BC,EAAAC,EAAA,GACnCH,GADmC,CAEtC,KAAM,EAER,GAEaI,EAAkB,iEDexB,IAAMC,EAA0BC,GAA2BC,EAAA,wBA/ClE,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAgDE,GAAM,CAAE,KAAAC,EAAM,OAAAC,EAAQ,aAAAC,EAAc,YAAAC,EAAa,OAAAC,EAAQ,SAAAC,EAAU,QAAAC,CAAQ,EACzEb,EAEIc,EAAK,IAAIC,EAAQ,SAKjBC,EAAQF,EAAG,aAAaN,EAAO,KAAM,CACzC,MAAO,CAAC,CAAE,MAAO,kBAAmB,CAAC,EACrC,WAAY,CACV,kBAAkBN,EAAAM,EAAO,YAAP,KAAAN,EAAoBe,CACxC,EACA,aAAc,CACZ,UAAW,kBACb,EACA,UAAW,CACT,UAAW,EACX,mBAAoB,GACpB,OAAOd,EAAAK,EAAO,OAAP,KAAAL,EAAe,IACtB,aAAaC,EAAAI,EAAO,cAAP,KAAAJ,EAAsB,WACnC,QAAS,CACP,IAAK,IACL,OAAQ,IACR,KAAM,IACN,MAAO,IACP,OAAQ,GACR,OAAQ,EACV,CACF,CACF,CAAC,EAKDY,EAAM,QAAUH,EAEhBG,EAAM,QAASE,GAAQ,CACrBA,EAAI,OAASP,GAAA,KAAAA,EAAUM,CACzB,CAAC,EAEDD,EAAM,QAAQ,QAAQ,CAACG,EAAQC,IAAU,CAzF3C,IAAAlB,GA0FIA,EAAAiB,EAAO,WAAP,MAAAjB,EAAA,KAAAiB,EAAkB,CAAE,aAAc,EAAM,EAAIE,GAAS,CA1FzD,IAAAnB,EAAAC,EAAAC,EAAAC,EA2FM,IAAMiB,EAAST,EAAQ,GAAGO,CAAK,EAE/BC,EAAK,QAASnB,EAAAoB,GAAA,YAAAA,EAAQ,SAAR,KAAApB,EAAkBqB,EAEhCF,EAAK,MAAOlB,EAAAmB,GAAA,YAAAA,EAAQ,OAAR,KAAAnB,EAAgBqB,EAE5BL,EAAO,WAAYf,EAAAkB,GAAA,YAAAA,EAAQ,YAAR,KAAAlB,EAAqBqB,EAExCJ,EAAK,KAAO,CACV,QAAS,QACT,KAAM,UACN,QAAS,CAAE,KAAM,UAAW,CAC9B,GAEIC,GAAA,MAAAA,EAAQ,YAAcA,GAAA,MAAAA,EAAQ,YAChCH,EAAO,SACLd,EAAAiB,GAAA,YAAAA,EAAQ,SAAR,KAAAjB,EAAkBiB,EAAO,YAAaI,EAAkB,aAE9D,EACF,CAAC,EAMD,IAAMC,EAAUX,EAAM,QAAQT,CAAI,EAE9BoB,EAAQ,OAAS,GACnBA,EAAQ,QAAQ,CAACC,EAAGC,IAAM,CACxBD,EAAE,OAASX,EAEXW,EAAE,SAAS,CAAE,aAAc,EAAM,EAAG,CAACP,EAAMS,IAAc,CA1H/D,IAAA5B,EAAAC,EAAAC,EA2HQ,IAAMkB,EAAST,EAAQ,GAAGiB,EAAY,CAAC,EAEvCT,EAAK,QAASnB,EAAAoB,GAAA,YAAAA,EAAQ,SAAR,KAAApB,EAAkBqB,EAEhCF,EAAK,WAAYlB,EAAAmB,GAAA,YAAAA,EAAQ,YAAR,KAAAnB,EAAqBsB,EAEtCJ,EAAK,MAAOjB,EAAAkB,GAAA,YAAAA,EAAQ,OAAR,KAAAlB,EAAgB2B,CAC9B,CAAC,CACH,CAAC,EAOH,IAAMC,EAAoB,CAAC,EAE3B,QAASH,EAAI,EAAGA,EAAIhB,EAAQ,OAAQgB,IAAK,CACvC,IAAMI,EAAIpB,EAAQgB,CAAC,EAEfI,EAAE,SACJD,GAAa3B,EAAA4B,EAAE,MAAF,KAAA5B,EAAS,GAAG,EAAI,EAE7B2B,GAAa1B,EAAA2B,EAAE,MAAF,KAAA3B,EAAS,GAAG,EAAI,IAEjC,CAEA,IAAM4B,EAAQlB,EAAM,OAAOgB,CAAY,EAqBvC,GAnBAE,EAAM,OAASjB,EAEfiB,EAAM,SAAS,CAAE,aAAc,EAAK,EAAG,CAACb,EAAMS,IAAc,CA1J9D,IAAA5B,EAAAC,EAAAC,EA2JI,IAAMkB,EAAST,EAAQiB,EAAY,CAAC,EAKpC,GAJAT,EAAK,QAASnB,EAAAoB,GAAA,YAAAA,EAAQ,SAAR,KAAApB,EAAkBqB,EAChCF,EAAK,WAAYlB,EAAAmB,GAAA,YAAAA,EAAQ,YAAR,KAAAnB,EAAqBsB,EACtCJ,EAAK,MAAOjB,EAAAkB,GAAA,YAAAA,EAAQ,OAAR,KAAAlB,EAAgBoB,EAExBF,GAAA,MAAAA,EAAQ,SAAU,CACpB,QAAQ,IAAIA,CAAM,EAClB,IAAMa,EAAMd,EAAK,QAAQ,QAAQ,WAAY,EAAE,EAE/CA,EAAK,MAAQ,CACX,SAAU,GACV,QAAS,OAAOc,EAAM,GAAG,IAAIA,GAAQd,EAAK,IAAc,EAAE,GAC5D,CACF,CACF,CAAC,EAEGd,EAAK,QAAU,GAAKM,EAAQ,QAAU,EAAG,OAE7C,IAAMuB,EAAS,MAAMtB,EAAG,KAAK,YAAY,EAEnCuB,EAAO,IAAI,KAAK,CAACD,CAAM,EAAG,CAAE,KAAM,mBAAoB,CAAC,EAE7DE,EAAOD,EAAMzB,EAAS,QAAQ,WAAY,EAAE,EAAI,OAAO,CACzD","names":["ExcelJS","saveAs","DEFAULT_BORDER","DEFAULT_ROW_ALIGNEMENT","ROW_HEIGHT","DEFAULT_ROW_FONT","BOLD_FONT","__spreadProps","__spreadValues","DEFAULT_NUM_FMT","generateXLSXGrid","args","__async","_a","_b","_c","_d","_e","data","config","rowAlignment","defaultFont","height","fileName","headers","wb","ExcelJS","sheet","ROW_HEIGHT","row","column","index","cell","header","DEFAULT_BORDER","BOLD_FONT","DEFAULT_ROW_ALIGNEMENT","DEFAULT_NUM_FMT","dataRow","r","i","colNumber","DEFAULT_ROW_FONT","totauxFields","h","total","col","buffer","blob","saveAs"]}