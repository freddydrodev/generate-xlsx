{"version":3,"sources":["../src/index.ts","../src/constants.ts"],"sourcesContent":["import type { Alignment, Font } from \"exceljs\";\nimport ExcelJS from \"exceljs\";\nimport { saveAs } from \"file-saver\";\nimport {\n  BOLD_FONT,\n  DEFAULT_BORDER,\n  DEFAULT_NUM_FMT,\n  DEFAULT_ROW_ALIGNEMENT,\n  DEFAULT_ROW_FONT,\n  ROW_HEIGHT,\n} from \"./constants\";\n\ntype GenerateXLSXArgs = {\n  fileName: string;\n  config: {\n    name: string;\n    orientation?: \"portrait\" | \"landscape\";\n    zoom?: number;\n    colWidth?: number;\n    colHeight?: number;\n  };\n  data: { [key: string]: string | number }[];\n  // headers: Partial<ExcelJS.Column>[];\n  headers: ({\n    isCurrency?: boolean;\n    isNumber?: boolean;\n    hasTotal?: boolean;\n  } & Pick<\n    Partial<ExcelJS.Column>,\n    | \"key\"\n    | \"header\"\n    | \"border\"\n    | \"alignment\"\n    | \"fill\"\n    | \"numFmt\"\n    | \"values\"\n    | \"width\"\n    | \"style\"\n    | \"font\"\n  >)[];\n  rowAlignment?: Partial<Alignment>;\n  defaultFont?: Partial<Font>;\n  boldFont?: Partial<Font>;\n  height?: number;\n  title?: { height?: number; fontSize?: number };\n};\n\nexport const generateXLSXGrid = async (args: GenerateXLSXArgs) => {\n  const { data, config, rowAlignment, defaultFont, height, fileName, headers } =\n    args;\n\n  const wb = new ExcelJS.Workbook();\n\n  /**\n   * CREATE THE SHEET\n   */\n  const sheet = wb.addWorksheet(config.name, {\n    views: [{ style: \"pageBreakPreview\" }],\n    properties: {\n      defaultRowHeight: config.colHeight ?? ROW_HEIGHT,\n    },\n    headerFooter: {\n      oddFooter: \"&F&RPage &P / &N\",\n    },\n    pageSetup: {\n      paperSize: 9,\n      horizontalCentered: true,\n      scale: config.zoom ?? 100,\n      orientation: config.orientation ?? \"portrait\",\n      margins: {\n        top: 0.75,\n        bottom: 0.75,\n        left: 0.25,\n        right: 0.25,\n        header: 0.3,\n        footer: 0.3,\n      },\n    },\n  });\n\n  /**\n   * CREATE THE SECTION HEADER\n   */\n  sheet.columns = headers;\n\n  sheet.eachRow((row) => {\n    row.height = height ?? ROW_HEIGHT;\n  });\n\n  sheet.columns.forEach((column, index) => {\n    column.eachCell?.({ includeEmpty: false }, (cell) => {\n      const header = headers.at(index);\n\n      cell.border = header?.border ?? DEFAULT_BORDER;\n\n      cell.font = header?.font ?? BOLD_FONT;\n\n      column.alignment = header?.alignment ?? DEFAULT_ROW_ALIGNEMENT;\n\n      cell.fill = {\n        pattern: \"solid\",\n        type: \"pattern\",\n        fgColor: { argb: \"FFD9D9D9\" },\n      };\n\n      if (header?.isCurrency || header?.isNumber) {\n        column.numFmt =\n          header?.numFmt ?? header.isCurrency ? DEFAULT_NUM_FMT : \"#,##;-#,##\";\n      }\n    });\n  });\n\n  /**\n   * ADD THE DATA ROWS\n   */\n\n  const dataRow = sheet.addRows(data);\n\n  if (dataRow.length > 0) {\n    dataRow.forEach((r, i) => {\n      r.height = ROW_HEIGHT;\n\n      r.eachCell({ includeEmpty: false }, (cell, colNumber) => {\n        const header = headers.at(colNumber - 1);\n\n        cell.border = header?.border ?? DEFAULT_BORDER;\n\n        cell.alignment = header?.alignment ?? DEFAULT_ROW_ALIGNEMENT;\n\n        cell.font = header?.font ?? DEFAULT_ROW_FONT;\n      });\n    });\n  }\n\n  /**\n   * ADD TOTAL\n   */\n\n  const totauxFields: any = {};\n\n  for (let i = 0; i < headers.length; i++) {\n    const h = headers[i];\n\n    if (h.hasTotal) {\n      totauxFields[h.key ?? \"-\"] = 0;\n    } else {\n      totauxFields[h.key ?? \"-\"] = null;\n    }\n  }\n\n  const total = sheet.addRow(totauxFields);\n\n  total.height = ROW_HEIGHT;\n\n  total.eachCell({ includeEmpty: true }, (cell, colNumber) => {\n    const header = headers[colNumber - 1];\n    cell.border = header?.border ?? DEFAULT_BORDER;\n    cell.alignment = header?.alignment ?? DEFAULT_ROW_ALIGNEMENT;\n    cell.font = header?.font ?? BOLD_FONT;\n\n    if (header?.hasTotal) {\n      console.log(header);\n      const col = cell.address.replace(/[0-9]+/gi, \"\");\n\n      cell.value = {\n        date1904: false,\n        formula: `SUM(${col + \"1\"}:${col + ((cell.row as any) - 1)})`,\n      };\n    }\n  });\n\n  if (data.length <= 0 || headers.length <= 0) return;\n\n  const buffer = await wb.xlsx.writeBuffer();\n\n  const blob = new Blob([buffer], { type: \"applicationi/xlsx\" });\n\n  saveAs(blob, fileName.replace(/\\.xlsx/gi, \"\") + \".xlsx\");\n};\n","import type { Font, Borders, Alignment } from \"exceljs\";\n\nexport const DEFAULT_BORDER: Partial<Borders> = {\n  bottom: { color: { argb: \"FF000000\" }, style: \"thin\" },\n  top: { color: { argb: \"FF000000\" }, style: \"thin\" },\n  left: { color: { argb: \"FF000000\" }, style: \"thin\" },\n  right: { color: { argb: \"FF000000\" }, style: \"thin\" },\n};\n\nexport const DEFAULT_ROW_ALIGNEMENT: Partial<Alignment> = {\n  horizontal: \"center\",\n  vertical: \"middle\",\n  wrapText: true,\n};\n\nconst DEFAULT_XLSX_FONT = \"Goudy Old Style\";\n\nexport const ROW_HEIGHT = 50;\n\nexport const DEFAULT_ROW_FONT: Partial<Font> = {\n  size: 16,\n  name: DEFAULT_XLSX_FONT,\n};\n\nexport const BOLD_XLSX_FONT = \"Goudy Old Style Bold\";\n\nexport const BOLD_FONT: Partial<Font> = {\n  ...DEFAULT_ROW_FONT,\n  bold: true,\n  name: BOLD_XLSX_FONT,\n};\n\nexport const DEFAULT_NUM_FMT = \"# ##0 [$F CFA-fr-CI]\";\n"],"mappings":"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","names":["_a","_b","_c","_d"]}